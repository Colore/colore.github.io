/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpecificationImport } from './routes/specification'
import { Route as ImplementationsImport } from './routes/implementations'
import { Route as DocumentationImport } from './routes/documentation'
import { Route as BackgroundImport } from './routes/background'
import { Route as SplatImport } from './routes/$'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SpecificationRoute = SpecificationImport.update({
    path: '/specification',
    getParentRoute: () => rootRoute
} as any)

const ImplementationsRoute = ImplementationsImport.update({
    path: '/implementations',
    getParentRoute: () => rootRoute
} as any)

const DocumentationRoute = DocumentationImport.update({
    path: '/documentation',
    getParentRoute: () => rootRoute
} as any)

const BackgroundRoute = BackgroundImport.update({
    path: '/background',
    getParentRoute: () => rootRoute
} as any)

const SplatRoute = SplatImport.update({
    path: '/$',
    getParentRoute: () => rootRoute
} as any)

const IndexRoute = IndexImport.update({
    path: '/',
    getParentRoute: () => rootRoute
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/'
            path: '/'
            fullPath: '/'
            preLoaderRoute: typeof IndexImport
            parentRoute: typeof rootRoute
        }
        '/$': {
            id: '/$'
            path: '/$'
            fullPath: '/$'
            preLoaderRoute: typeof SplatImport
            parentRoute: typeof rootRoute
        }
        '/background': {
            id: '/background'
            path: '/background'
            fullPath: '/background'
            preLoaderRoute: typeof BackgroundImport
            parentRoute: typeof rootRoute
        }
        '/documentation': {
            id: '/documentation'
            path: '/documentation'
            fullPath: '/documentation'
            preLoaderRoute: typeof DocumentationImport
            parentRoute: typeof rootRoute
        }
        '/implementations': {
            id: '/implementations'
            path: '/implementations'
            fullPath: '/implementations'
            preLoaderRoute: typeof ImplementationsImport
            parentRoute: typeof rootRoute
        }
        '/specification': {
            id: '/specification'
            path: '/specification'
            fullPath: '/specification'
            preLoaderRoute: typeof SpecificationImport
            parentRoute: typeof rootRoute
        }
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute
    '/$': typeof SplatRoute
    '/background': typeof BackgroundRoute
    '/documentation': typeof DocumentationRoute
    '/implementations': typeof ImplementationsRoute
    '/specification': typeof SpecificationRoute
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute
    '/$': typeof SplatRoute
    '/background': typeof BackgroundRoute
    '/documentation': typeof DocumentationRoute
    '/implementations': typeof ImplementationsRoute
    '/specification': typeof SpecificationRoute
}

export interface FileRoutesById {
    '__root__': typeof rootRoute
    '/': typeof IndexRoute
    '/$': typeof SplatRoute
    '/background': typeof BackgroundRoute
    '/documentation': typeof DocumentationRoute
    '/implementations': typeof ImplementationsRoute
    '/specification': typeof SpecificationRoute
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath
    fullPaths: '/' | '/$' | '/background' | '/documentation' | '/implementations' | '/specification'
    fileRoutesByTo: FileRoutesByTo
    to: '/' | '/$' | '/background' | '/documentation' | '/implementations' | '/specification'
    id: '__root__' | '/' | '/$' | '/background' | '/documentation' | '/implementations' | '/specification'
    fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute
    SplatRoute: typeof SplatRoute
    BackgroundRoute: typeof BackgroundRoute
    DocumentationRoute: typeof DocumentationRoute
    ImplementationsRoute: typeof ImplementationsRoute
    SpecificationRoute: typeof SpecificationRoute
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    SplatRoute: SplatRoute,
    BackgroundRoute: BackgroundRoute,
    DocumentationRoute: DocumentationRoute,
    ImplementationsRoute: ImplementationsRoute,
    SpecificationRoute: SpecificationRoute
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/background",
        "/documentation",
        "/implementations",
        "/specification"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/background": {
      "filePath": "background.tsx"
    },
    "/documentation": {
      "filePath": "documentation.tsx"
    },
    "/implementations": {
      "filePath": "implementations.tsx"
    },
    "/specification": {
      "filePath": "specification.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
